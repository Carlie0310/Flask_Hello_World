# .github/workflows/atelier3.yml
name: ATELIER 3 – Serveur Flask + ngrok

on:
  workflow_dispatch:

jobs:
  deploy-flask-via-ngrok:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with: 
          python-version: '3.9'

      - name: Build de l’image Docker
        run: |
          docker build -t flask-hello-world .

      - name: Deploy et récupérer URL
        run: |
          # Installer ngrok - CORRECTION ICI
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok

          # Configurer le token
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

          # Lancer le conteneur Flask
          docker run -d -p 5000:5000 --name flask_container  flask-hello-world
          sleep 10
          
          # Vérifier que l'app Flask répond localement
          echo "🔍 Test local de l'app Flask..."
          curl -f http://localhost:5000/ || (echo "❌ App Flask ne répond pas localement" && docker logs flask-container && exit 1)
          echo "✅ App Flask répond localement"

          # Lancer ngrok
          ngrok http 5000 --log=stdout > /tmp/ngrok.log 2>&1 &
          sleep 25

          # Récupérer l'URL avec plusieurs tentatives
          for i in {1..5}; do
            NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | grep -o '"public_url":"[^"]*https[^"]*' | cut -d'"' -f4 | head -1)
            if [ -n "$NGROK_URL" ]; then
              break
            fi
            echo "Tentative $i/5 pour récupérer l'URL..."
            sleep 5
          done

          if [ -n "$NGROK_URL" ]; then
            echo "🌐 Application accessible sur : $NGROK_URL"
          
          # Test de connectivité ngrok
            echo "🔍 Test de connectivité ngrok..."
            for i in {1..3}; do
              if curl -f -s "$NGROK_URL/" > /dev/null; then
                echo "✅ ngrok tunnel OK"
                echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
                break
              else
                echo "Tentative $i/3 de connexion ngrok..."
                sleep 10
              fi
            done
          
            if [ -z "$(curl -s "$NGROK_URL/" || echo '')" ]; then
              echo "❌ ngrok tunnel ne répond pas"
              exit 1
            fi
          
          else
            echo "❌ Pas d'URL trouvée"
            cat /tmp/ngrok.log
            exit 1
          fi

      - name: Démarrer ngrok et récupérer l’URL
        id: start_ngrok
        run: |
          nohup ./ngrok http 5000 --log=stdout > ngrok.log 2>&1 &
          sleep 5
          NGROK_URL=$(grep -oE "https://[0-9a-z]+\\.ngrok\\.io" ngrok.log | head -n1)
          echo "URL_NGROK=$NGROK_URL" >> $GITHUB_OUTPUT

      - name: Afficher l’URL ngrok
        run: |
          echo "Votre serveur Flask est exposé temporairement à : ${{ steps.start_ngrok.outputs.URL_NGROK }}"

      - name: Garder le tunnel actif (120 s)
        run: |
          echo "Tunnel actif pendant 120 secondes…"
          sleep 120
          echo "Fin du tunnel. Le job va se terminer."
